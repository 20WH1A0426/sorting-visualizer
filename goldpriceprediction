{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/20WH1A0426/sorting-visualizer/blob/main/goldpriceprediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E0mPrpA0q38d",
        "outputId": "3fa69c7a-24fa-4e65-e392-0482879aba1e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "XkHYbxl3rbUx"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Copy of gld_price_data.csv')"
      ],
      "metadata": {
        "id": "sgmcO85srfeA"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "GWUOumKErrEQ",
        "outputId": "83113d61-72c8-4e10-8fa1-4adce8b199ba"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Date          SPX        GLD        USO     SLV   EUR/USD\n",
              "0  1/2/2008  1447.160034  84.860001  78.470001  15.180  1.471692\n",
              "1  1/3/2008  1447.160034  85.570000  78.370003  15.285  1.474491\n",
              "2  1/4/2008  1411.630005  85.129997  77.309998  15.167  1.475492\n",
              "3  1/7/2008  1416.180054  84.769997  75.500000  15.053  1.468299\n",
              "4  1/8/2008  1390.189941  86.779999  76.059998  15.590  1.557099"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-078fdb67-938e-4836-8469-36effcf10aff\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>SPX</th>\n",
              "      <th>GLD</th>\n",
              "      <th>USO</th>\n",
              "      <th>SLV</th>\n",
              "      <th>EUR/USD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1/2/2008</td>\n",
              "      <td>1447.160034</td>\n",
              "      <td>84.860001</td>\n",
              "      <td>78.470001</td>\n",
              "      <td>15.180</td>\n",
              "      <td>1.471692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1/3/2008</td>\n",
              "      <td>1447.160034</td>\n",
              "      <td>85.570000</td>\n",
              "      <td>78.370003</td>\n",
              "      <td>15.285</td>\n",
              "      <td>1.474491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1/4/2008</td>\n",
              "      <td>1411.630005</td>\n",
              "      <td>85.129997</td>\n",
              "      <td>77.309998</td>\n",
              "      <td>15.167</td>\n",
              "      <td>1.475492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1/7/2008</td>\n",
              "      <td>1416.180054</td>\n",
              "      <td>84.769997</td>\n",
              "      <td>75.500000</td>\n",
              "      <td>15.053</td>\n",
              "      <td>1.468299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1/8/2008</td>\n",
              "      <td>1390.189941</td>\n",
              "      <td>86.779999</td>\n",
              "      <td>76.059998</td>\n",
              "      <td>15.590</td>\n",
              "      <td>1.557099</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-078fdb67-938e-4836-8469-36effcf10aff')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-078fdb67-938e-4836-8469-36effcf10aff button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-078fdb67-938e-4836-8469-36effcf10aff');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#check the df structure\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D1rwNT1Lr496",
        "outputId": "5f1aceb6-7a17-4c2f-f91d-259ce50eabf2"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2290 entries, 0 to 2289\n",
            "Data columns (total 6 columns):\n",
            " #   Column   Non-Null Count  Dtype  \n",
            "---  ------   --------------  -----  \n",
            " 0   Date     2290 non-null   object \n",
            " 1   SPX      2290 non-null   float64\n",
            " 2   GLD      2290 non-null   float64\n",
            " 3   USO      2290 non-null   float64\n",
            " 4   SLV      2290 non-null   float64\n",
            " 5   EUR/USD  2290 non-null   float64\n",
            "dtypes: float64(5), object(1)\n",
            "memory usage: 107.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#find number of rows and columns\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "31aNNjY4sL1x",
        "outputId": "e2c292ff-cb5e-494e-f5ed-32d205ad9244"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2290, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#describe of numerical columns\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "VjFLY6HlsO59",
        "outputId": "c722e801-dd2a-4e1d-b94a-7af193afc12f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               SPX          GLD          USO          SLV      EUR/USD\n",
              "count  2290.000000  2290.000000  2290.000000  2290.000000  2290.000000\n",
              "mean   1654.315776   122.732875    31.842221    20.084997     1.283653\n",
              "std     519.111540    23.283346    19.523517     7.092566     0.131547\n",
              "min     676.530029    70.000000     7.960000     8.850000     1.039047\n",
              "25%    1239.874969   109.725000    14.380000    15.570000     1.171313\n",
              "50%    1551.434998   120.580002    33.869999    17.268500     1.303297\n",
              "75%    2073.010070   132.840004    37.827501    22.882500     1.369971\n",
              "max    2872.870117   184.589996   117.480003    47.259998     1.598798"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fda2419c-d670-416d-8341-9aaf206729aa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SPX</th>\n",
              "      <th>GLD</th>\n",
              "      <th>USO</th>\n",
              "      <th>SLV</th>\n",
              "      <th>EUR/USD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2290.000000</td>\n",
              "      <td>2290.000000</td>\n",
              "      <td>2290.000000</td>\n",
              "      <td>2290.000000</td>\n",
              "      <td>2290.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1654.315776</td>\n",
              "      <td>122.732875</td>\n",
              "      <td>31.842221</td>\n",
              "      <td>20.084997</td>\n",
              "      <td>1.283653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>519.111540</td>\n",
              "      <td>23.283346</td>\n",
              "      <td>19.523517</td>\n",
              "      <td>7.092566</td>\n",
              "      <td>0.131547</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>676.530029</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>7.960000</td>\n",
              "      <td>8.850000</td>\n",
              "      <td>1.039047</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1239.874969</td>\n",
              "      <td>109.725000</td>\n",
              "      <td>14.380000</td>\n",
              "      <td>15.570000</td>\n",
              "      <td>1.171313</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1551.434998</td>\n",
              "      <td>120.580002</td>\n",
              "      <td>33.869999</td>\n",
              "      <td>17.268500</td>\n",
              "      <td>1.303297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2073.010070</td>\n",
              "      <td>132.840004</td>\n",
              "      <td>37.827501</td>\n",
              "      <td>22.882500</td>\n",
              "      <td>1.369971</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2872.870117</td>\n",
              "      <td>184.589996</td>\n",
              "      <td>117.480003</td>\n",
              "      <td>47.259998</td>\n",
              "      <td>1.598798</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fda2419c-d670-416d-8341-9aaf206729aa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fda2419c-d670-416d-8341-9aaf206729aa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fda2419c-d670-416d-8341-9aaf206729aa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#find the unique values from categorical features\n",
        "for col in df.select_dtypes(include='object').columns:\n",
        "  print(col)\n",
        "  print(df[col].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U5jLrLKPsUH7",
        "outputId": "66b2e629-a847-41ab-82a6-f9cdc11907fa"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "['1/2/2008' '1/3/2008' '1/4/2008' ... '5/10/2018' '5/14/2018' '5/16/2018']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#find missing values\n",
        "features_na = [features for features in df.columns if df[features].isnull().sum()>0]\n",
        "for feature in features_na:\n",
        "  print(feature,np.round(df[feature].isnull().mean(),4), '%missing values')\n",
        "else:\n",
        "    print(\"no missing value found \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aKRRdY38s6LI",
        "outputId": "e0a0b17f-601b-4828-b0dd-8472c87bb839"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "no missing value found \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "find features with one value"
      ],
      "metadata": {
        "id": "vtISgEeftnxd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for column in df.columns:\n",
        "  print(column,df[column].nunique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D6g4PkQlthrK",
        "outputId": "70ec1ed5-70d9-445e-bf2a-b825420e82a2"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date 2290\n",
            "SPX 2277\n",
            "GLD 1930\n",
            "USO 1514\n",
            "SLV 1331\n",
            "EUR/USD 2066\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explore the categorical features"
      ],
      "metadata": {
        "id": "lTL3GUGHuJxR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "iJg1amgCuJtr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_features=[feature for feature in df.columns if ((df[feature].dtypes=='O')&(feature not in ['GLD']))]\n",
        "categorical_features"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2KehixgDuCh4",
        "outputId": "2460ff50-9bcf-4482-aa33-e19ea14889ed"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Date']"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for feature in categorical_features:\n",
        "  print('The feature is {} and number of categories are {}'.format(feature,len(df[feature].unique())))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QhpS-AKNuv3B",
        "outputId": "063a8127-a8c0-48ba-f232-e7db5b5dc7ba"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The feature is Date and number of categories are 2290\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "explore the numerical features"
      ],
      "metadata": {
        "id": "eIr3iPeLvOBU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#list of numerical variables\n",
        "numerical_features = [feature for feature in df.columns if ((df[feature].dtypes !='O')& (feature not in ['GLD']))]\n",
        "print('number of numerical variables: ',len(numerical_features))\n",
        "\n",
        "#visualize the numerical variables\n",
        "df[numerical_features].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "id": "KiP-xJNpvSlw",
        "outputId": "8f45173f-0b05-4a97-f2fe-64705072b3e6"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number of numerical variables:  4\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           SPX        USO     SLV   EUR/USD\n",
              "0  1447.160034  78.470001  15.180  1.471692\n",
              "1  1447.160034  78.370003  15.285  1.474491\n",
              "2  1411.630005  77.309998  15.167  1.475492\n",
              "3  1416.180054  75.500000  15.053  1.468299\n",
              "4  1390.189941  76.059998  15.590  1.557099"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3cfcfbf-d4fd-4bb7-bb1c-0f6d15301f7b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SPX</th>\n",
              "      <th>USO</th>\n",
              "      <th>SLV</th>\n",
              "      <th>EUR/USD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1447.160034</td>\n",
              "      <td>78.470001</td>\n",
              "      <td>15.180</td>\n",
              "      <td>1.471692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1447.160034</td>\n",
              "      <td>78.370003</td>\n",
              "      <td>15.285</td>\n",
              "      <td>1.474491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1411.630005</td>\n",
              "      <td>77.309998</td>\n",
              "      <td>15.167</td>\n",
              "      <td>1.475492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1416.180054</td>\n",
              "      <td>75.500000</td>\n",
              "      <td>15.053</td>\n",
              "      <td>1.468299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1390.189941</td>\n",
              "      <td>76.059998</td>\n",
              "      <td>15.590</td>\n",
              "      <td>1.557099</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3cfcfbf-d4fd-4bb7-bb1c-0f6d15301f7b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b3cfcfbf-d4fd-4bb7-bb1c-0f6d15301f7b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b3cfcfbf-d4fd-4bb7-bb1c-0f6d15301f7b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Find the discrete numerical features"
      ],
      "metadata": {
        "id": "6hrkcB5uwP20"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "discrete_feature=[feature for feature in numerical_features if len(df[feature].unique())<25]\n",
        "print(\"Discrete variable count:{}\".format(len(discrete_feature)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DwXNSMRIwUoo",
        "outputId": "5abbcaeb-2f5a-4354-95a9-19f41f5c4aa0"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Discrete variable count:0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Find continous numerical features"
      ],
      "metadata": {
        "id": "HUcYdWJ6w4mc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "continuos_features=[feature for feature in numerical_features if feature not in discrete_feature+['GLD']]\n",
        "print(\"Continous feature count {}\".format(len(continuos_features)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "An4ihM7nw4L8",
        "outputId": "dfa03271-bb87-40a1-b1e1-dfef81d5df94"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Continous feature count 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Distribution of Continuos Numerical Features"
      ],
      "metadata": {
        "id": "YvbsMI6Tx4XN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#plot a univariate distribution of continues observations \n",
        "plt.figure(figsize=(20,60), facecolor=\"white\") \n",
        "plotnumber =1 \n",
        "for continuos_feature in continuos_features:\n",
        "    ax = plt.subplot(12,3, plotnumber)\n",
        "    sns.distplot(df[continuos_feature])\n",
        "    plt.xlabel(continuos_feature)\n",
        "    plotnumber+=1\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "gmoaTAETx_Xq",
        "outputId": "344703e2-cb18-498e-ac6f-e0f133a57763"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-29-81ff6cf8dd6e>:6: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[continuos_feature])\n",
            "<ipython-input-29-81ff6cf8dd6e>:6: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[continuos_feature])\n",
            "<ipython-input-29-81ff6cf8dd6e>:6: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[continuos_feature])\n",
            "<ipython-input-29-81ff6cf8dd6e>:6: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[continuos_feature])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x4320 with 4 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKIAAAImCAYAAABglSJ+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAADTw0lEQVR4nOzdeXiU5bk/8O/s2bfJnsnKhJCEhAAJAcUNRTTaVJQComgLFlu1tdrjcn5YtJxTodWjbQ/2KJUqWiEILnEjQFFRERLCTgJk3/fJvs1kZt7fHyEpkSRkmT3fz3VxkZl5l/vNMs+89/M89yMSBEEAERERERERERGRmYmtHQAREREREREREU0NTEQREREREREREZFFMBFFREREREREREQWwUQUERERERERERFZBBNRRERERERERERkEVJrB2BNvr6+iIiIsHYYREQ2p6ysDE1NTdYOw+rYThARDY/tRD+2E0REwxutnZjSiaiIiAjk5uZaOwwiIpuTnJxs7RBsAtsJIqLhsZ3ox3aCiGh4o7UTnJpHREREREREREQWwUQUERERERERERFZBBNRRERERERERERkEUxEERERERERERGRRTARRUREREREREREFsFEFBERERERERERWQQTUUREREREREREZBFMRBERERERERERkUUwEUVERERERERERBYhNefBs7Ky8Pjjj8NgMOChhx7Cs88+O+R1rVaLBx54AMePH4dSqcSuXbsQEREBANi0aRO2bdsGiUSCv/71r1iyZAkAYM2aNfjss8/g7++Pc+fODR7rqaeewqeffgq5XI5p06bhrbfegpeXlzkvj2zAjuyKce+zKjXMDJEQEZE5XO19nu/pRESOY7T3fL7fEzkOs42IMhgMePTRR7F3717k5+dj586dyM/PH7LNtm3b4O3tjaKiIjzxxBN45plnAAD5+fnIyMhAXl4esrKy8Mgjj8BgMAAAfvrTnyIrK+uK8y1evBjnzp3DmTNnMH36dGzatMlcl0ZERERERERERBNgtkRUTk4O1Go1oqKiIJfLsXLlSmRmZg7ZJjMzEw8++CAAYNmyZTh48CAEQUBmZiZWrlwJhUKByMhIqNVq5OTkAACuv/56+Pj4XHG+W2+9FVJp/wCv+fPno6qqylyXRkREVpKVlYWYmBio1Wps3rz5ite1Wi1WrFgBtVqN1NRUlJWVDb525swZLFiwAPHx8UhISEBvb68FIyciIiIiIsCMiajq6mqEhoYOPlapVKiurh5xG6lUCk9PT2g0mjHtO5p//OMfuP3224d9bevWrUhOTkZycjIaGxvHc0lERGRFkxlpq9frcf/99+P1119HXl4evv76a8hkMmtcBhERERHRlOZwxcr/8Ic/QCqV4r777hv29XXr1iE3Nxe5ubnw8/OzcHRERDRRkxlpu3//fiQmJmLWrFkAAKVSCYlEYvFrICIiIiKa6syWiAoJCUFlZeXg46qqKoSEhIy4jV6vR1tbG5RK5Zj2Hc7bb7+Nzz77DO+99x5EIpGJroSIiGzBZEbaFhQUQCQSYcmSJZgzZw7+9Kc/jXgejpwlIiIiIjIfsyWiUlJSUFhYiNLSUuh0OmRkZCA9PX3INunp6di+fTsAYM+ePVi0aBFEIhHS09ORkZEBrVaL0tJSFBYWYt68eaOeLysrC3/605/wySefwMXFxVyXRUREdkiv1+O7777De++9h++++w4fffQRDh48OOy2HDlLRERERGQ+ZktESaVSbNmyBUuWLEFsbCyWL1+O+Ph4bNiwAZ988gkAYO3atdBoNFCr1XjllVcGC8/Gx8dj+fLliIuLw2233YbXXnttcArFvffeiwULFuDixYtQqVTYtm0bAOCxxx5DR0cHFi9ejKSkJPziF78w16UREZEVTGakrUqlwvXXXw9fX1+4uLggLS0NJ06csGj8REREREQESM158LS0NKSlpQ15buPGjYNfOzk5Yffu3cPuu379eqxfv/6K53fu3Dns9kVFRZOIlIiIbN3lI21DQkKQkZGBHTt2DNlmYKTtggULhoy0XbJkCf70pz+hu7sbcrkchw4dwhNPPGGlKyFT2pFdMerrq1LDLBQJEdmCrKwsPP744zAYDHjooYfw7LPPDnn9m2++wW9+8xucOXMGGRkZWLZs2eBrFRUVeOihh1BZWQmRSIQvvvgCERERFr4CIiLHZ9ZEFBERkalcPtLWYDBgzZo1gyNtk5OTkZ6ejrVr12L16tVQq9Xw8fFBRkYGAMDb2xtPPvkkUlJSIBKJkJaWhjvuuMPKV0RERKY0sLrqgQMHoFKpkJKSgvT0dMTFxQ1uExYWhrfffhsvv/zyFfs/8MADWL9+PRYvXozOzk6IxQ63rhMRkU1gIoqIiOzGZEba3n///bj//vvNGh8REVnP5aurAhhcXfXyRNTACKcfJpny8/Oh1+uxePFiAICbm5tlgiYimoKY5iciIiIiIrs3ltVVR1JQUAAvLy/cfffdmD17Np566ikYDIZht+XqqkREk8NEFBERERERTWl6vR7ffvstXn75ZRw7dgwlJSV4++23h92Wq6sSEU0OE1FERERERGT3xrK66khUKhWSkpIQFRUFqVSKu+66i6urEhGZCRNRRERERERk9y5fXVWn0yEjIwPp6elj3re1tXVwqt2XX345pLYUERGZDhNRRERERERk9y5fXTU2NhbLly8fXF31k08+AQAcO3YMKpUKu3fvxsMPP4z4+HgAgEQiwcsvv4ybb74ZCQkJEAQBP//5z615OUREDour5hERERERkUO42uqqKSkpqKqqGnbfxYsX48yZM2aNj4iIOCKKiIiIiIiIiIgshIkoIiIiIiIiIiKyCCaiiIiIiIiIiIjIIpiIIiIiIiIiIiIii2AiioiIiIiIiIiILIKr5hFNMTuyK8a1/arUMDNFQkRERERERFMNR0QREREREREREZFFMBFFREREREREREQWwUQUERERERERERFZBBNRRERERERERERkEUxEERERERERERGRRTARRUREREREREREFsFEFBERERERERERWQQTUUREREREREREZBFMRBERERERERERkUUwEUVERERERERERBbBRBQREREREREREVkEE1FEREREROQQsrKyEBMTA7Vajc2bN1/x+jfffIM5c+ZAKpViz549V7ze3t4OlUqFxx57zBLhEhFNSUxEERERERGR3TMYDHj00Uexd+9e5OfnY+fOncjPzx+yTVhYGN5++22sWrVq2GP87ne/w/XXX2+JcImIpiyzJqKu1iOh1WqxYsUKqNVqpKamoqysbPC1TZs2Qa1WIyYmBvv27Rt8fs2aNfD398fMmTOHHKu5uRmLFy9GdHQ0Fi9ejJaWFrNdFxERERER2ZacnByo1WpERUVBLpdj5cqVyMzMHLJNREQEEhMTIRZfeRt0/Phx1NfX49Zbb7VUyEREU5LZElFj6ZHYtm0bvL29UVRUhCeeeALPPPMMACA/Px8ZGRnIy8tDVlYWHnnkERgMBgDAT3/6U2RlZV1xvs2bN+Pmm29GYWEhbr755mETX0REZN8m2sFRVlYGZ2dnJCUlISkpCb/4xS8sHDkREZlbdXU1QkNDBx+rVCpUV1ePaV+j0Yjf/va3ePnll6+67datW5GcnIzk5GQ0NjZOOF4ioqnKbImosfRIZGZm4sEHHwQALFu2DAcPHoQgCMjMzMTKlSuhUCgQGRkJtVqNnJwcAMD1118PHx+fK853+bEefPBBfPzxx+a6NCIisoLJdHAAwLRp03Dq1CmcOnUKr7/+uqXDJyIiG/a3v/0NaWlpUKlUV9123bp1yM3NRW5uLvz8/CwQHRGRYzFbImosPRKXbyOVSuHp6QmNRjOh3oz6+noEBQUBAAIDA1FfXz/sduzBICKyT5Pp4CAiIscXEhKCysrKwcdVVVUICQkZ075HjhzBli1bEBERgf/4j//AO++8g2effdZcoRIRTWkOWaxcJBJBJBIN+xp7MIiI7NNkOjgAoLS0FLNnz8YNN9yAb7/91nKBExGRRaSkpKCwsBClpaXQ6XTIyMhAenr6mPZ97733UFFRgbKyMrz88st44IEHWOqDiMhMzJaIGkuPxOXb6PV6tLW1QalUTqg3IyAgALW1tQCA2tpa+Pv7m+pSiIjIzgUFBaGiogInT57EK6+8glWrVqG9vX3YbTlylojIPkmlUmzZsgVLlixBbGwsli9fjvj4eGzYsAGffPIJAODYsWNQqVTYvXs3Hn74YcTHx1s5aiKiqcdsiaix9Eikp6dj+/btAIA9e/Zg0aJFEIlESE9PR0ZGBrRaLUpLS1FYWIh58+aNer7Lj7V9+3b8+Mc/Ns+FERGRVUymg0OhUECpVAIA5s6di2nTpqGgoGDY83DkLBGR/UpLS0NBQQGKi4uxfv16AMDGjRsH70NSUlJQVVWFrq4uaDQa5OXlXXGMn/70p9iyZYtF4yYimkrMlogaS4/E2rVrodFooFar8corrwwOf42Pj8fy5csRFxeH2267Da+99hokEgkA4N5778WCBQtw8eJFqFQqbNu2DQDw7LPP4sCBA4iOjsa//vUvzukmInIwk+ngaGxsHFx9taSkBIWFhYiKirL4NRARERERTXVScx48LS0NaWlpQ57buHHj4NdOTk7YvXv3sPuuX79+sBfjcjt37hx2e6VSiYMHD04iWiIismWXd3AYDAasWbNmsIMjOTkZ6enpWLt2LVavXg21Wg0fHx9kZGQAAL755hts2LABMpkMYrEYr7/++rArsBIRERERkXmZNRFFRERkShPt4Ljnnntwzz33mD0+IiIiIiIanUOumkdERERERERERLaHI6KIiIjs3I7silFfX5UaZqFIiIiIiIhGxxFRRERERERERERkEUxEERERERERERGRRTARRUREREREREREFsEaUWSXGju02PpNMT44UQ25RIzpAe64OdYfMglzq0RERERERES2iokosjsF9R342VvH0NDRiyhfNxiMAr4tbERpUydWL4iAm4K/1kRERERERES2iHfsZFdqWnuw4o0jkEnE+OiRa3Gmqg0AkFfThl3HKpGRU4G1CyMhEomsHCkRERERERER/RDnMZHd6DMY8diOE+gzCMhYNx8zQzwHX4sP9sSdicEoaepCblmLFaMkIiIiIiIiopEwEUV24/Wvi3GiohWb70lAlJ/bFa+nRHgjys8VX5yrRbdWb4UIiYiIiIiIiGg0TESRXahp7cFrXxchLSEQdyYGD7uNSCTCjxKDodUbcbRUY+EIiYiIiIiIiOhqmIgiu7B57wUIAvCft8eOul2AhxNiAtxxpFiDPoPRQtERERERERER0VgwEUU270JdOz45XYOHrotEqI/LVbe/LtoXXToDTla0mj84IiIiIiIiIhozJqLI5r32VTFc5RL8/LqoMW0f6euKQA8nHC9vNnNkRERERERERDQeTESRTStu7MRnZ2qwekEEvFzkY9pHJBIhKdQLlS090HRqzRwhEREREdmKrKwsxMTEQK1WY/PmzVe8/s0332DOnDmQSqXYs2fP4POnTp3CggULEB8fj8TEROzatcuSYRMRTSlMRJFN2/ZdKeQSMR66LnJc+yWqPAEAp6vazBEWEREREdkYg8GARx99FHv37kV+fj527tyJ/Pz8IduEhYXh7bffxqpVq4Y87+LignfeeQd5eXnIysrCb37zG7S2tloweiKiqYOJKLJZbd19+PBEFe5KCoGvm2Jc+3q5yBGhdMXpylYIgmCmCImIyJoa2nu5MAURDcrJyYFarUZUVBTkcjlWrlyJzMzMIdtEREQgMTERYvHQ26Dp06cjOjoaABAcHAx/f380NjZaLHYioqmEiSiyWbtyK9DbZ8SD10RMaP9ElScaO7Vo6OD0PCIiR9KjM2B3biX+fLAQb39fBp2eySgiAqqrqxEaGjr4WKVSobq6etzHycnJgU6nw7Rp04Z9fevWrUhOTkZycjKTVUREE8BEFNkko1HAO0fK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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Relation between continuous numerical features and labels"
      ],
      "metadata": {
        "id": "KmJgi2-qzmLu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(20,60), facecolor='white')\n",
        "plotnumber = 1\n",
        "for feature in continuos_features:\n",
        "    data=df.copy()\n",
        "    ax = plt.subplot(12,3, plotnumber)\n",
        "    plt.scatter (data [feature], data['GLD'])\n",
        "    plt.xlabel(feature)\n",
        "    plt.ylabel('GLD')\n",
        "    plt.title(feature)\n",
        "    plotnumber+=1\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 553
        },
        "id": "4xOOshSBzlm2",
        "outputId": "b328bf6b-f409-47f9-c2f8-0d6dcf32ed8a"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x4320 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Find Outliers in numerical features"
      ],
      "metadata": {
        "id": "TwX9dHoL0Xza"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#boxplot on numerical features to find outliers\n",
        "plt.figure(figsize=(28,68), facecolor='white')\n",
        "plotnumber =1\n",
        "for numerical_feature in numerical_features: \n",
        "   ax = plt.subplot(12,3,plotnumber) \n",
        "   sns.boxplot(df[numerical_feature]) \n",
        "   plt.xlabel(numerical_feature) \n",
        "   plotnumber+=1\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "N-ASfkXU0YLG",
        "outputId": "cbd4c092-1c12-4220-c92a-8da24fd47614"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2016x4896 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Dki9W1aP1WT5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## Checking for correlation\n",
        "cor_mat=df.corr()\n",
        "fig = plt.figure(figsize=(15,7))\n",
        "sns.heatmap(cor_mat, annot=True) \n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "id": "e6--Xy8C1W_V",
        "outputId": "ddb78781-f6b2-41ee-9ac0-e1844d7de475"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x504 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (cor_mat['GLD'].sort_values(ascending=False),'\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "URtsR9F71q8C",
        "outputId": "0ffcb5c5-713d-4ed4-cca1-f4cb1914dd58"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GLD        1.000000\n",
            "SLV        0.866632\n",
            "SPX        0.049345\n",
            "EUR/USD   -0.024375\n",
            "USO       -0.186360\n",
            "Name: GLD, dtype: float64 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2=df.copy()"
      ],
      "metadata": {
        "id": "K5rK4kBX2LQg"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "OGfsWEEH2Umt",
        "outputId": "2f214a35-5a4b-4cf2-d4d3-5e5893ef6f89"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Date          SPX        GLD        USO     SLV   EUR/USD\n",
              "0  1/2/2008  1447.160034  84.860001  78.470001  15.180  1.471692\n",
              "1  1/3/2008  1447.160034  85.570000  78.370003  15.285  1.474491\n",
              "2  1/4/2008  1411.630005  85.129997  77.309998  15.167  1.475492\n",
              "3  1/7/2008  1416.180054  84.769997  75.500000  15.053  1.468299\n",
              "4  1/8/2008  1390.189941  86.779999  76.059998  15.590  1.557099"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0fc9de3f-6d36-4cb4-8d51-7e3b0dfbfe66\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>SPX</th>\n",
              "      <th>GLD</th>\n",
              "      <th>USO</th>\n",
              "      <th>SLV</th>\n",
              "      <th>EUR/USD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1/2/2008</td>\n",
              "      <td>1447.160034</td>\n",
              "      <td>84.860001</td>\n",
              "      <td>78.470001</td>\n",
              "      <td>15.180</td>\n",
              "      <td>1.471692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1/3/2008</td>\n",
              "      <td>1447.160034</td>\n",
              "      <td>85.570000</td>\n",
              "      <td>78.370003</td>\n",
              "      <td>15.285</td>\n",
              "      <td>1.474491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1/4/2008</td>\n",
              "      <td>1411.630005</td>\n",
              "      <td>85.129997</td>\n",
              "      <td>77.309998</td>\n",
              "      <td>15.167</td>\n",
              "      <td>1.475492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1/7/2008</td>\n",
              "      <td>1416.180054</td>\n",
              "      <td>84.769997</td>\n",
              "      <td>75.500000</td>\n",
              "      <td>15.053</td>\n",
              "      <td>1.468299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1/8/2008</td>\n",
              "      <td>1390.189941</td>\n",
              "      <td>86.779999</td>\n",
              "      <td>76.059998</td>\n",
              "      <td>15.590</td>\n",
              "      <td>1.557099</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0fc9de3f-6d36-4cb4-8d51-7e3b0dfbfe66')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0fc9de3f-6d36-4cb4-8d51-7e3b0dfbfe66 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0fc9de3f-6d36-4cb4-8d51-7e3b0dfbfe66');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#drop date\n",
        "df2.drop(['Date'],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "WUc1kAH82bB4"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = df2.drop(['GLD'], axis=1) \n",
        "y = df2['GLD']\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=0)"
      ],
      "metadata": {
        "id": "G5anJFoz2mBJ"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(X_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J0tYVeGD3ePg",
        "outputId": "9956aed6-df51-4344-a263-0b8318d941c1"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1832"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "nHLcHMMtwgIM",
        "outputId": "16aa9d53-afe0-487d-fec8-960317bade31"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              SPX        USO        SLV   EUR/USD\n",
              "486   1165.810059  39.560001  16.600000  1.356705\n",
              "31    1349.989990  75.930000  16.952000  1.467610\n",
              "1754  2041.890015  10.740000  13.080000  1.087453\n",
              "1490  1862.760010  31.100000  16.670000  1.280442\n",
              "1526  2026.140015  23.280001  16.370001  1.239495\n",
              "...           ...        ...        ...       ...\n",
              "1033  1461.050049  34.119999  33.570000  1.305824\n",
              "1731  2023.040039  13.060000  13.590000  1.081502\n",
              "763   1283.500000  36.009998  34.369999  1.427002\n",
              "835   1218.280029  35.200001  32.330002  1.386001\n",
              "1653  2077.419922  19.100000  14.900000  1.103363\n",
              "\n",
              "[1832 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98c38606-b6c5-4cf5-b86c-fa95e8bc0817\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SPX</th>\n",
              "      <th>USO</th>\n",
              "      <th>SLV</th>\n",
              "      <th>EUR/USD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>486</th>\n",
              "      <td>1165.810059</td>\n",
              "      <td>39.560001</td>\n",
              "      <td>16.600000</td>\n",
              "      <td>1.356705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>1349.989990</td>\n",
              "      <td>75.930000</td>\n",
              "      <td>16.952000</td>\n",
              "      <td>1.467610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1754</th>\n",
              "      <td>2041.890015</td>\n",
              "      <td>10.740000</td>\n",
              "      <td>13.080000</td>\n",
              "      <td>1.087453</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1490</th>\n",
              "      <td>1862.760010</td>\n",
              "      <td>31.100000</td>\n",
              "      <td>16.670000</td>\n",
              "      <td>1.280442</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1526</th>\n",
              "      <td>2026.140015</td>\n",
              "      <td>23.280001</td>\n",
              "      <td>16.370001</td>\n",
              "      <td>1.239495</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1033</th>\n",
              "      <td>1461.050049</td>\n",
              "      <td>34.119999</td>\n",
              "      <td>33.570000</td>\n",
              "      <td>1.305824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1731</th>\n",
              "      <td>2023.040039</td>\n",
              "      <td>13.060000</td>\n",
              "      <td>13.590000</td>\n",
              "      <td>1.081502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>1283.500000</td>\n",
              "      <td>36.009998</td>\n",
              "      <td>34.369999</td>\n",
              "      <td>1.427002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>835</th>\n",
              "      <td>1218.280029</td>\n",
              "      <td>35.200001</td>\n",
              "      <td>32.330002</td>\n",
              "      <td>1.386001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1653</th>\n",
              "      <td>2077.419922</td>\n",
              "      <td>19.100000</td>\n",
              "      <td>14.900000</td>\n",
              "      <td>1.103363</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1832 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98c38606-b6c5-4cf5-b86c-fa95e8bc0817')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-98c38606-b6c5-4cf5-b86c-fa95e8bc0817 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-98c38606-b6c5-4cf5-b86c-fa95e8bc0817');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model Selection"
      ],
      "metadata": {
        "id": "uJT9xdUjHDt6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import ShuffleSplit\n",
        "from sklearn.model_selection import GridSearchCV"
      ],
      "metadata": {
        "id": "4y9LhcT1HACl"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def find_best_model_using_gridsearchcv(X,y):\n",
        "  algos = {'decision_tree': {'model': DecisionTreeRegressor(),'params': {'criterion': ['mse', 'friedman_mse'], 'splitter': ['best', 'random']}},'RandomForestRegressor':{'model' : RandomForestRegressor(),'params':{'n_estimators': [10, 50, 100, 130],'criterion': ['mse'],'max_depth': range(2, 4, 1),'max_features': ['auto', 'log2']}},'XGBRegressor':{'model' :XGBRegressor(),'params':{'learning_rate': [0.5, 0.1, 0.01, 0.001],'max_depth': [2, 3],'n_estimators': [10, 50, 100, 200]}}}\n",
        "  scores = []\n",
        "  cv = ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)\n",
        "  for algo_name, config in algos.items():\n",
        "    gs = GridSearchCV(config['model'],config['params'],cv=cv,return_train_score=False)\n",
        "    gs.fit(x,y)\n",
        "    scores.append({'model': algo_name,'best_score': gs.best_score_,'best_params': gs.best_params_})\n",
        "  return pd.DataFrame(scores, columns=['model', 'best_score', 'best_params'])"
      ],
      "metadata": {
        "id": "XrnlaMEzPzRf"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import pandas module\n",
        "import pandas as pd\n",
        "\n",
        "pd.set_option('display.max_colwidth',100)\n",
        "find_best_model_using_gridsearchcv"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_WuixZUHe6MX",
        "outputId": "c86b75dd-1f63-40c0-f5e0-0e9dd605f6f9"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.find_best_model_using_gridsearchcv(X, y)>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model Building"
      ],
      "metadata": {
        "id": "ipC93FuUjf33"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBRegressor\n",
        "\n",
        "model_xgb = XGBRegressor(learning_rate=0.5, max_depth=3, n_estimators=200)"
      ],
      "metadata": {
        "id": "w_wcuM4GjsHK"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_xgb.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "JyliDUJV2X_o",
        "outputId": "0bafb2ab-5f3d-4fa3-b7c9-0a2270b2731f"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=0.5, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=3, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             n_estimators=200, n_jobs=None, num_parallel_tree=None,\n",
              "             predictor=None, random_state=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=0.5, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=3, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             n_estimators=200, n_jobs=None, num_parallel_tree=None,\n",
              "             predictor=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=0.5, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=3, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             n_estimators=200, n_jobs=None, num_parallel_tree=None,\n",
              "             predictor=None, random_state=None, ...)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_xgb.score(X_test,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b1CAnfnC2d35",
        "outputId": "afa581ce-d9ad-452d-f6af-6d4b4f6a25ef"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9875798991169574"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred= model_xgb.predict(X_test)"
      ],
      "metadata": {
        "id": "XpVYDa0F2k7L"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZCOyMngj2q1u",
        "outputId": "8055eef2-35fa-4d2f-a512-ab69853ad3a0"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([127.83968 , 117.78003 , 139.86362 , 121.72129 ,  91.45914 ,\n",
              "       150.29877 , 117.72737 , 112.97666 , 148.61874 , 105.00025 ,\n",
              "       102.307045, 119.127556,  91.814926, 155.26105 , 121.58247 ,\n",
              "       117.40806 ,  85.852165,  90.79795 ,  91.66415 , 124.19409 ,\n",
              "        82.25382 , 118.25713 , 127.26382 , 174.63809 , 173.54956 ,\n",
              "       139.62447 , 114.931145, 160.5232  , 133.16188 , 115.47771 ,\n",
              "       109.895065, 105.13089 , 129.16321 , 121.94389 , 101.23032 ,\n",
              "       119.902405,  83.509834, 115.2284  , 126.30069 , 139.80621 ,\n",
              "       108.75211 , 128.74828 , 101.58659 , 138.98744 , 135.0287  ,\n",
              "       150.4273  , 118.71637 , 160.68329 , 150.95863 , 127.303375,\n",
              "       117.543015, 114.32274 , 125.42216 , 118.27691 , 152.87804 ,\n",
              "       124.0259  , 112.059265,  86.76846 , 155.93192 , 118.46649 ,\n",
              "        87.29648 , 115.03043 ,  84.1512  , 146.00029 , 125.15785 ,\n",
              "       127.68587 , 125.2775  , 120.90435 , 168.3814  , 122.42993 ,\n",
              "       125.94005 , 173.56548 , 122.900635, 169.93297 , 118.11049 ,\n",
              "       128.55203 , 155.35655 , 107.33948 , 114.85426 , 160.35266 ,\n",
              "       120.462975, 126.72102 , 117.36593 , 121.601   , 113.33941 ,\n",
              "       162.10957 , 115.05412 , 114.22932 , 123.67853 ,  97.24267 ,\n",
              "       115.15101 , 113.58347 ,  81.93351 , 160.39491 , 126.24284 ,\n",
              "       119.61426 ,  91.31365 , 102.93754 , 142.16902 ,  90.58157 ,\n",
              "       154.75089 , 121.5714  , 123.54115 , 116.76118 ,  87.7499  ,\n",
              "       131.33755 , 123.68232 , 168.4724  , 111.304436, 166.59213 ,\n",
              "       103.961136, 141.78629 , 115.08126 , 119.70628 ,  92.4078  ,\n",
              "       167.4008  , 113.24473 , 111.49722 ,  82.8459  , 108.14557 ,\n",
              "       154.13461 ,  88.603745,  75.33158 , 121.750046, 103.8759  ,\n",
              "       116.46177 , 123.276276, 132.17392 , 117.979645, 104.52743 ,\n",
              "       109.6792  , 114.034584,  93.518906, 124.63699 , 117.946495,\n",
              "       114.86924 ,  69.93526 , 126.4606  ,  80.76355 , 116.734505,\n",
              "       116.78364 , 154.58543 , 134.89291 , 110.49759 , 166.1643  ,\n",
              "       131.63892 , 124.260666, 118.367325, 123.71394 , 123.6143  ,\n",
              "       160.64581 , 106.49233 , 116.46177 ,  87.18453 , 122.62007 ,\n",
              "       113.90972 ,  85.80973 , 114.284424, 120.1617  ,  87.34232 ,\n",
              "       136.33151 , 146.0949  , 134.18079 , 116.309074, 129.07654 ,\n",
              "       117.69538 , 100.57806 , 116.08822 , 115.40737 , 118.834816,\n",
              "       156.4689  , 122.285934,  91.74802 , 118.483696, 104.08384 ,\n",
              "       122.41255 , 106.50894 , 107.73727 , 121.087845, 125.22661 ,\n",
              "        87.84086 , 172.02296 , 121.25366 , 117.97416 , 166.7217  ,\n",
              "       124.68532 , 109.23571 , 131.51538 , 131.56126 , 122.52099 ,\n",
              "       119.98477 , 138.55502 , 150.2702  , 116.42029 , 160.79576 ,\n",
              "       139.99837 , 124.203064, 127.20815 , 183.29811 , 121.90833 ,\n",
              "       163.71455 ,  98.64352 , 131.8866  ,  91.72493 ,  97.862686,\n",
              "        91.471504, 105.942215, 114.01883 , 161.97635 , 164.07188 ,\n",
              "       152.99188 , 114.21182 , 115.60538 , 117.80433 , 120.23603 ,\n",
              "        87.59682 , 102.290924, 156.25824 , 105.12289 , 104.16726 ,\n",
              "       156.19337 ,  75.94583 , 121.06641 , 166.48991 , 116.90768 ,\n",
              "       148.2516  , 149.01244 , 140.61874 , 153.79918 , 129.84933 ,\n",
              "       126.41974 , 123.75557 , 116.702484, 134.33833 , 166.26689 ,\n",
              "       150.65437 , 127.973045, 160.00606 , 128.74445 , 101.17734 ,\n",
              "       170.50507 , 115.8639  ,  83.988884, 164.00983 , 152.49828 ,\n",
              "       116.67239 , 127.533966,  90.93356 ,  89.04537 , 113.761894,\n",
              "        87.32177 , 115.74634 , 117.74829 , 149.98251 , 117.79937 ,\n",
              "       106.4153  , 118.38619 , 136.48479 , 110.67776 , 121.79916 ,\n",
              "        84.56791 , 125.88859 , 125.89238 , 170.28383 , 127.62711 ,\n",
              "       143.61356 , 115.98958 , 170.55222 , 104.11592 , 172.59064 ,\n",
              "       111.364105, 116.07504 ,  87.47744 , 126.08288 , 117.62025 ,\n",
              "       153.92719 , 161.70891 ,  75.18616 , 104.06492 , 111.74126 ,\n",
              "       111.09829 , 107.784386, 117.95011 ,  90.454926,  88.086845,\n",
              "        82.87041 , 137.19148 , 126.37946 , 117.70181 ,  95.416016,\n",
              "       108.698204,  81.002205,  72.03092 , 118.62793 , 118.80085 ,\n",
              "        90.51155 , 111.74249 , 117.75048 , 117.171646, 124.58292 ,\n",
              "       147.3721  ,  86.570045, 132.073   , 117.19482 , 154.35867 ,\n",
              "       105.398056, 147.05536 , 124.76027 , 115.846275, 114.04113 ,\n",
              "       125.8768  , 135.7193  , 139.76666 , 118.377   , 127.87578 ,\n",
              "        98.40147 , 116.53071 ,  88.8181  ,  90.1144  , 110.04973 ,\n",
              "       133.86258 , 148.33504 , 161.72505 , 119.132835, 106.68313 ,\n",
              "       100.87894 , 150.96233 , 153.92128 , 106.40991 , 140.08998 ,\n",
              "       121.00255 , 126.78834 ,  86.93188 , 176.65929 , 117.53705 ,\n",
              "       145.32985 , 116.21105 ,  84.18216 , 119.37987 , 136.23605 ,\n",
              "       117.14571 , 139.84198 , 118.03422 , 164.06635 , 120.878586,\n",
              "       120.12534 , 120.811104, 126.3927  ,  86.54952 , 145.82144 ,\n",
              "       112.38548 , 111.66497 , 113.81031 , 153.84866 ,  92.234375,\n",
              "        92.266884, 118.66877 , 157.67087 , 119.70023 , 155.37091 ,\n",
              "       127.32089 , 161.07434 , 125.32077 , 129.33508 , 122.86993 ,\n",
              "        73.32458 ,  94.61615 ,  90.58157 , 120.90814 , 112.95419 ,\n",
              "       118.98683 , 107.530785, 126.17505 , 126.307816, 123.170715,\n",
              "       120.0928  , 103.343864, 112.30944 , 109.77071 , 149.9316  ,\n",
              "       126.53941 , 144.42085 , 126.35477 , 146.58513 , 141.04253 ,\n",
              "       109.73955 , 107.807724, 129.17548 , 104.04449 , 114.968605,\n",
              "       120.69441 , 147.17833 ,  96.169395, 104.734634, 128.17586 ,\n",
              "       126.008415, 165.34006 , 121.17822 , 150.08052 , 112.24197 ,\n",
              "       124.857925,  87.851654,  80.690315, 124.44544 , 126.17505 ,\n",
              "       138.76947 , 119.8316  , 128.02179 ,  86.59165 , 124.89561 ,\n",
              "       118.91422 , 117.05416 , 102.45234 , 119.78652 ,  91.48578 ,\n",
              "       103.278145, 123.63465 , 116.25142 , 126.51468 ,  90.59576 ,\n",
              "       119.9406  , 107.68051 , 120.45696 , 132.79468 ,  87.85418 ,\n",
              "       125.01703 , 101.281204,  98.97848 , 104.7519  ,  88.73006 ,\n",
              "       121.02034 , 124.92372 , 172.5193  , 125.52958 ,  92.922455,\n",
              "       161.84547 , 107.530785,  97.3651  , 130.03764 , 114.91372 ,\n",
              "        89.03014 , 166.03392 ,  91.30541 ,  90.06387 , 169.89128 ,\n",
              "       161.46542 , 165.35434 , 169.81392 , 126.232414, 126.138275,\n",
              "       122.683426,  87.70564 , 120.68635 , 120.60916 , 131.3018  ,\n",
              "       157.76134 , 115.63755 , 107.580284], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aA00w5gZ2u0p",
        "outputId": "1d4fec76-fbcc-466e-b5c7-4c045af46f05"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1255    128.789993\n",
              "2100    115.620003\n",
              "711     139.220001\n",
              "1328    120.930000\n",
              "53       93.040001\n",
              "           ...    \n",
              "2085    120.360001\n",
              "1362    129.130005\n",
              "828     159.869995\n",
              "567     117.339996\n",
              "1693    106.379997\n",
              "Name: GLD, Length: 458, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    }
  ]
}